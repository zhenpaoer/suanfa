package huawei.level1;

import java.util.Scanner;

/**
 * 黑白图像常采用灰度图的方式存储，即图像的每个像素填充一个灰色阶段值，256节阶灰图是一个灰阶值取值范围为0-255的灰阶矩阵，0表示全黑，255表示全白，范围内的其他值表示不同的灰度。
 *
 * 但在计算机中实际存储时，会使用压缩算法，其中一个种压缩格式描述如如下：
 *
 * 10 10 255 34 0 1 255 8 0 3 255 6 0 5 255 4 0 7 255 2 0 9 255 21
 *
 * 所有的数值以空格分隔；
 * 前两个数分别表示矩阵的行数和列数；
 * 从第三个数开始，每两个数一组，每组第一个数是灰阶值，第二个数表示该灰阶值从左到右，从上到下（可理解为二维数组按行存储在一维矩阵中）的连续像素个数。比如题目所述的例子， “255 34” 表示有连续 34 个像素的灰阶值是 255。
 * 如此，图像软件在打开此格式灰度图的时候，就可以根据此算法从压缩数据恢复出原始灰度图矩阵。
 *
 * 请从输入的压缩数恢复灰度图原始矩阵，并返回指定像素的灰阶值。
 *
 * 输入描述
 * 10 10 255 34 0 1 255 8 0 3 255 6 0 5 255 4 0 7 255 2 0 9 255 21
 *
 * 3 4
 *
 * 输入包行两行，第一行是灰度图压缩数据，第二行表示一个像素位置的行号和列号，如 0 0 表示左上角像素。
 *
 * 输出描述
 * 0
 *
 * 输出数据表示的灰阶矩阵的指定像素的灰阶值。
 *
 * 示例一
 * 输入：
 * 10 10 56 34 99 1 87 8 99 3 255 6 99 5 255 4 99 7 255 2 99 9 255 21
 * 3 4
 *
 * 输出：
 * 99
 *
 * 说明：
 * 将压缩数据恢复后的灰阶矩阵第3行第4列的像素灰阶值是99。
 */
public class Image {
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);

        String str=in.nextLine()+" ";//获取输入的灰度图压缩数据,加入空格方便分割
        int m=in.nextInt();//获取查找的行
        int n=in.nextInt();//获取查找的列

        //分割字符将行和列与具体数据分割
        StringBuilder sb=new StringBuilder(str);
        int temp1=sb.indexOf(" ");//记录第一次出现空格的索引
        int x=Integer.valueOf(sb.substring(0,temp1));//矩阵的行数
        int temp2=sb.indexOf(" ",temp1+1);//第二次出现空格的索引
        int y=Integer.valueOf(sb.substring(temp1+1,temp2));//矩阵的列数

        sb.delete(0,temp2+1);//删除行和列占的位置
        int index=m*x+n+1;//像素位置的水平位置

        int be=0;//开始截取索引
        int sum=0;//一组数的第一个及填充个数
        int tc=0;//一组数的第一个及填充灰度
        int j=0;//表示一组数的第一个还是第二个

        /*如去除行和列的数据如下，没两个为一组，前一个为灰度，后一个为填充个数
         * 56 34 99 1 87 8 99 3 255 6 99 5 255 4 99 7 255 2 99 9 255 21
         * 根据索引的下标确定索引填充的区间，如0 0是第一个填充 1 1则为 1*行数+1+1填充
         * 找出填充区间，填充区间前一个数即为灰度
         * */
        for (int i = 0; i < sb.length(); i++) {
            if (sb.charAt(i) == ' ') {
                int t=Integer.valueOf(sb.substring(be,i));
                be=i+1;
                if(j%2==0){
                    tc=t;
                }
                if(j%2!=0){
                    sum+=t;
                    if (sum >= index) {//找到填充区间
                        System.out.println(tc);
                        break;
                    }
                }
                j++;
            }

        }

    }
}