package huawei.level2;

/**
 * 攀登者喜欢寻找各种地图，并且尝试攀登到最高的山峰。地图表示为一维数组，数组的索引代表水平位置，数组的元素代表相对海拔高度。其中数组元素0代表地面。
 *
 * 一个山脉可能有多座山峰(山峰定义：高度大于相邻位置的高度，或在地图边界且高度大于相邻的高度)。登山者想要知道一张地图中有多少座山峰。 例如：[0,1,2,4,3,1,0,0,1,2,3,1,2,1,0]，地图中有三个山脉位置分别为 1,2,3,4,5 和 8,9,10,11,12,13，最高峰高度分别为 4,3,2。最高峰位置分别为3,10,12
 *
 * 输入描述：
 * 输入为一个整型数组，数组长度大于1。
 *
 * 输出描述：
 * 输出地图中山峰的数量。
 *
 *
 * 用例1：
 * 输入
 * 0,1,2,3,2,4
 *
 * 输出
 * 2
 * 说明：元素3和4 都是山峰，输出2.
 *
 * 用例2：
 * 输入
 * 0,1,4,3,1,0,0,1,2,3,1,2,1,0
 *
 * 输出
 * 3
 * 说明 山峰所在索引分别为3               4
 *
 *               +---+ 
 *               |   | 
 *               |   | 3                       3 
 *               |   | 
 *               |   +---+                   ----- 
 *               |       |                   |   | 
 *             2 |       |                 2 |   |     2 
 *               |       |                   |   | 
 *           +---+       |               ----+   |   +---+ 
 *           |           |               |       |   |   | 
 *         1 |           | 1           1 |       | 1 |   | 1 
 *           |           |               |       |   |   | 
 *       +---+           +---+       +---+       +---+   +---+ 
 *       |                   |       |                       | 
 *     0 |                   | 0   0 |                       | 0 
 *       |                   |       |                       | 
 *   +---+                   +-------+                       +---+ 
 *
 *    */
public class MontainsHeight {
    public static void main(String[] args) {
        int[] arr = new int[]{0,1,4,3,1,0,0,1,2,3,1,2,1,0};
        System.out.println(getResult(arr));
    }
    public static int getResult(int[] arr){
        int ans = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            if(i == 0){
                if(arr[i] > arr[i+1]){
                    ans++;
                }
            }else if (i == arr.length - 1){
                if(arr[i] > arr[i-1]){
                    ans++;
                }
            }else {
                if(arr[i] >= arr[i-1] && arr[i] > arr[i+1]){
                    ans++;
                }
            }
        }
        return ans;
    }

}
