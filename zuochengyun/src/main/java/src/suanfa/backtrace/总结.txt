
⾯试题也可以⽤回溯算法来解决，如⼋皇后问题，排列组合问题，0-1背包问题，数独问题等
什么是回溯算法
回溯算法本质其实就是枚举，在给定的枚举集合中，不断从其中尝试搜索找到问题的解，如果在搜索过
程中发现不满⾜求解条件 ，则「回溯」返回，尝试其它路径继续搜索解决，这种⾛不通就回退再尝试其
它路径的⽅法就是回溯法，许多复杂的，规模较⼤的问题都可以使⽤回溯法，所以回溯法有「通⽤解题
⽅法」的美称。
回溯算法解题通⽤套路
function backtrace(已选解集合,每个阶段可选解) {
     if (已选解集合满⾜条件) {
         结果集.add(已选解集合);
         return;
     }
     // 遍历每个阶段的可选解集合
     for (可选解 in 每个阶段的可选解) {
         // 选择此阶段其中⼀个解,将其加⼊到已选解集合中
         已选解集合.add(可选解)
         // 进⼊下⼀个阶段
         backtrace(已选解集合,下个阶段可选的空间解)
         // 「回溯」换个解再遍历
         已选解集合.remove(可选解)
     }
 }
 综上，我们可以得出回溯算法的基本套路如下：
 1. 将问题分成多个阶段，每个阶段都有多个不同的解，这样就将问题转化成了树形问题，这⼀步是问
 题的关键！如果能将问题转成树形问题，其实就成功了⼀半，需要注意的是树形问题要明确终⽌条
 件，这样可以在 DFS 的过程中及时终⽌遍历，达到剪枝的效果
 2. 套⽤上述回溯算法的解题模板，进⾏深度优先遍历，直到找到问题的解。

总结
 使⽤回溯算法解题的关键是把问题分成多阶段，每个阶段都有相应的解，于是就把问题转成了树形问
 题，转成树形问题后，剩下的只需要套⽤上⽂总结的解题模板即可，尤其需要注意的是，当遍历当前阶
 段解的时候，可以根据之前阶段的解作「剪枝」操作，这样使问题的搜索规模变⼩，有效降低了问题的
 复杂度。